{"ast":null,"code":"import React from \"react\";\n\nfunction interp(a, b, x) {\n  return a * (1 - x) + b * x;\n}\n\nexport default class BezierComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.x = value => Math.round(interp(this.props.xFrom, this.props.xTo, value));\n\n    this.y = value => Math.round(interp(this.props.yFrom, this.props.yTo, value));\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const _this$props = this.props,\n          xFrom = _this$props.xFrom,\n          yFrom = _this$props.yFrom,\n          xTo = _this$props.xTo,\n          yTo = _this$props.yTo;\n    return nextProps.xFrom !== xFrom || nextProps.yFrom !== yFrom || nextProps.xTo !== xTo || nextProps.yTo !== yTo;\n  }\n\n}","map":{"version":3,"sources":["/home/parvin/Documents/my-app/src/BezierComponent.js"],"names":["React","interp","a","b","x","BezierComponent","Component","value","Math","round","props","xFrom","xTo","y","yFrom","yTo","shouldComponentUpdate","nextProps"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AACvB,SAAOF,CAAC,IAAI,IAAIE,CAAR,CAAD,GAAcD,CAAC,GAAGC,CAAzB;AACD;;AAED,eAAe,MAAMC,eAAN,SAA8BL,KAAK,CAACM,SAApC,CAA8C;AAAA;AAAA;;AAAA,SAC3DF,CAD2D,GACvDG,KAAK,IAAIC,IAAI,CAACC,KAAL,CAAWR,MAAM,CAAC,KAAKS,KAAL,CAAWC,KAAZ,EAAmB,KAAKD,KAAL,CAAWE,GAA9B,EAAmCL,KAAnC,CAAjB,CAD8C;;AAAA,SAE3DM,CAF2D,GAEvDN,KAAK,IAAIC,IAAI,CAACC,KAAL,CAAWR,MAAM,CAAC,KAAKS,KAAL,CAAWI,KAAZ,EAAmB,KAAKJ,KAAL,CAAWK,GAA9B,EAAmCR,KAAnC,CAAjB,CAF8C;AAAA;;AAG3DS,EAAAA,qBAAqB,CAACC,SAAD,EAAY;AAAA,wBACI,KAAKP,KADT;AAAA,UACvBC,KADuB,eACvBA,KADuB;AAAA,UAChBG,KADgB,eAChBA,KADgB;AAAA,UACTF,GADS,eACTA,GADS;AAAA,UACJG,GADI,eACJA,GADI;AAE/B,WACEE,SAAS,CAACN,KAAV,KAAoBA,KAApB,IACAM,SAAS,CAACH,KAAV,KAAoBA,KADpB,IAEAG,SAAS,CAACL,GAAV,KAAkBA,GAFlB,IAGAK,SAAS,CAACF,GAAV,KAAkBA,GAJpB;AAMD;;AAX0D","sourcesContent":["import React from \"react\";\n\nfunction interp(a, b, x) {\n  return a * (1 - x) + b * x;\n}\n\nexport default class BezierComponent extends React.Component {\n  x = value => Math.round(interp(this.props.xFrom, this.props.xTo, value));\n  y = value => Math.round(interp(this.props.yFrom, this.props.yTo, value));\n  shouldComponentUpdate(nextProps) {\n    const { xFrom, yFrom, xTo, yTo } = this.props;\n    return (\n      nextProps.xFrom !== xFrom ||\n      nextProps.yFrom !== yFrom ||\n      nextProps.xTo !== xTo ||\n      nextProps.yTo !== yTo\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}