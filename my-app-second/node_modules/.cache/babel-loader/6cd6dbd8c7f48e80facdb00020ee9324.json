{"ast":null,"code":"module.exports = class Spline {\n  constructor(xs, ys) {\n    this.xs = xs;\n    this.ys = ys;\n    this.ks = this.getNaturalKs(new Array(this.xs.length).fill(0));\n  }\n\n  getNaturalKs(ks) {\n    const n = this.xs.length - 1;\n    const A = zerosMat(n + 1, n + 2);\n\n    for (let i = 1; i < n; i++ // rows\n    ) {\n      A[i][i - 1] = 1 / (this.xs[i] - this.xs[i - 1]);\n      A[i][i] = 2 * (1 / (this.xs[i] - this.xs[i - 1]) + 1 / (this.xs[i + 1] - this.xs[i]));\n      A[i][i + 1] = 1 / (this.xs[i + 1] - this.xs[i]);\n      A[i][n + 1] = 3 * ((this.ys[i] - this.ys[i - 1]) / ((this.xs[i] - this.xs[i - 1]) * (this.xs[i] - this.xs[i - 1])) + (this.ys[i + 1] - this.ys[i]) / ((this.xs[i + 1] - this.xs[i]) * (this.xs[i + 1] - this.xs[i])));\n    }\n\n    A[0][0] = 2 / (this.xs[1] - this.xs[0]);\n    A[0][1] = 1 / (this.xs[1] - this.xs[0]);\n    A[0][n + 1] = 3 * (this.ys[1] - this.ys[0]) / ((this.xs[1] - this.xs[0]) * (this.xs[1] - this.xs[0]));\n    A[n][n - 1] = 1 / (this.xs[n] - this.xs[n - 1]);\n    A[n][n] = 2 / (this.xs[n] - this.xs[n - 1]);\n    A[n][n + 1] = 3 * (this.ys[n] - this.ys[n - 1]) / ((this.xs[n] - this.xs[n - 1]) * (this.xs[n] - this.xs[n - 1]));\n    return solve(A, ks);\n  }\n\n  at(x) {\n    let i = 1;\n\n    while (this.xs[i] < x) i++;\n\n    const t = (x - this.xs[i - 1]) / (this.xs[i] - this.xs[i - 1]);\n    const a = this.ks[i - 1] * (this.xs[i] - this.xs[i - 1]) - (this.ys[i] - this.ys[i - 1]);\n    const b = -this.ks[i] * (this.xs[i] - this.xs[i - 1]) + (this.ys[i] - this.ys[i - 1]);\n    const q = (1 - t) * this.ys[i - 1] + t * this.ys[i] + t * (1 - t) * (a * (1 - t) + b * t);\n    return q;\n  }\n\n};\n\nfunction solve(A, ks) {\n  let m = A.length;\n\n  for (let k = 0; k < m; k++ // column\n  ) {\n    // pivot for column\n    let i_max = 0;\n    let vali = Number.NEGATIVE_INFINITY;\n\n    for (let i = k; i < m; i++) if (A[i][k] > vali) {\n      i_max = i;\n      vali = A[i][k];\n    }\n\n    swapRows(A, k, i_max); // for all rows below pivot\n\n    for (let i = k + 1; i < m; i++) {\n      for (let j = k + 1; j < m + 1; j++) {\n        if (A[k][k]) {\n          A[i][j] = A[i][j] - A[k][j] * (A[i][k] / A[k][k]);\n        }\n      }\n\n      A[i][k] = 0;\n    }\n  }\n\n  for (let i = m - 1; i >= 0; i-- // rows = columns\n  ) {\n    var v = 0;\n\n    if (A[i][i]) {\n      v = A[i][m] / A[i][i];\n    }\n\n    ks[i] = v;\n\n    for (let j = i - 1; j >= 0; j-- // rows\n    ) {\n      A[j][m] -= A[j][i] * v;\n      A[j][i] = 0;\n    }\n  }\n\n  return ks;\n}\n\nfunction zerosMat(r, c) {\n  const A = [];\n\n  for (let i = 0; i < r; i++) {\n    A.push([]);\n\n    for (let j = 0; j < c; j++) A[i].push(0);\n  }\n\n  return A;\n}\n\nfunction swapRows(m, k, l) {\n  let p = m[k];\n  m[k] = m[l];\n  m[l] = p;\n}","map":null,"metadata":{},"sourceType":"script"}