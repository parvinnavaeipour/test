{"ast":null,"code":"/*\n * Module:      Line Segment\n *\n * Description: a line\n */\nimport React, { Component } from 'react';\nimport Point from './Point';\n\nclass Line {\n  constructor(pointStart, pointEnd) {\n    this._pStart = pointStart;\n    this._pEnd = pointEnd;\n  }\n\n  get pointStart() {\n    return this._pStart;\n  }\n\n  get pointEnd() {\n    return this._pEnd;\n  }\n  /*\n   * find point between start -> end \n   * measure distance from start\n   */\n\n\n  findPointOnLineBetweenPoints(distance) {}\n  /*\n   * find point away from end point + distance.\n   * - not in between start -> end\n   */\n\n\n  findPointOnLineAwayEnd(distance) {}\n  /*\n   * find tangent line from input point\n   *\n   * input:\n   * - point\n   * \n   * output:\n   * - tangent line object\n   */\n\n\n  findTangentThroughPoint(point, // start point of line \n  distance) // find end point on tangent line\n  {\n    // tangent line's slope\n    var tm = 1 / this._m; // find y intercept m = (y2 - y1) / (x2 - x1)\n\n    var y = point.y - tm * point.x;\n    var line = new Line(point, new Point(0, y));\n    var p = line.findPointOnLineAwayEnd(distance); // consider about direction (between start + end point)\n\n    line = new Line(point, p);\n    return line;\n  }\n  /*\n   * find y-intercept point\n   */\n\n\n  get Yintercept() {\n    this._m = (this._pEnd.y - this._pStart.y) / (this._pEnd.x - this._pStart.x);\n    var y = this._pEnd.y - this._m * this._pEnd.x;\n    return new Point(0, y);\n  }\n  /*\n   * find intersection with another line\n   *\n   * input:\n   * - line\n   *\n   * output:\n   * - point of intersection\n   */\n\n\n  pointIntersectLine(line) {}\n\n}\n\nexport default Line;","map":{"version":3,"sources":["/home/parvin/Documents/my-app/src/Line.js"],"names":["React","Component","Point","Line","constructor","pointStart","pointEnd","_pStart","_pEnd","findPointOnLineBetweenPoints","distance","findPointOnLineAwayEnd","findTangentThroughPoint","point","tm","_m","y","x","line","p","Yintercept","pointIntersectLine"],"mappings":"AAAA;;;;;AAMA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,IAAN,CAAW;AAEPC,EAAAA,WAAW,CAACC,UAAD,EAAaC,QAAb,EACX;AACI,SAAKC,OAAL,GAAeF,UAAf;AACA,SAAKG,KAAL,GAAaF,QAAb;AACH;;AAED,MAAID,UAAJ,GACA;AACI,WAAO,KAAKE,OAAZ;AACH;;AAED,MAAID,QAAJ,GACA;AACI,WAAO,KAAKE,KAAZ;AACH;AAED;;;;;;AAIAC,EAAAA,4BAA4B,CAACC,QAAD,EAC5B,CACC;AAED;;;;;;AAIAC,EAAAA,sBAAsB,CAACD,QAAD,EACtB,CAEC;AAED;;;;;;;;;;;AASAE,EAAAA,uBAAuB,CAACC,KAAD,EAAa;AACZH,EAAAA,QADD,EACa;AACpC;AACI;AACA,QAAII,EAAE,GAAG,IAAI,KAAKC,EAAlB,CAFJ,CAII;;AACA,QAAIC,CAAC,GAAGH,KAAK,CAACG,CAAN,GAAUF,EAAE,GAAGD,KAAK,CAACI,CAA7B;AACA,QAAIC,IAAI,GAAG,IAAIf,IAAJ,CAASU,KAAT,EAAgB,IAAIX,KAAJ,CAAU,CAAV,EAAac,CAAb,CAAhB,CAAX;AAEA,QAAIG,CAAC,GAAGD,IAAI,CAACP,sBAAL,CAA4BD,QAA5B,CAAR,CARJ,CAUI;;AACAQ,IAAAA,IAAI,GAAG,IAAIf,IAAJ,CAASU,KAAT,EAAgBM,CAAhB,CAAP;AACA,WAAOD,IAAP;AACH;AAED;;;;;AAGA,MAAIE,UAAJ,GACA;AACI,SAAKL,EAAL,GAAU,CAAC,KAAKP,KAAL,CAAWQ,CAAX,GAAe,KAAKT,OAAL,CAAaS,CAA7B,KAAiC,KAAKR,KAAL,CAAWS,CAAX,GAAe,KAAKV,OAAL,CAAaU,CAA7D,CAAV;AACA,QAAID,CAAC,GAAG,KAAKR,KAAL,CAAWQ,CAAX,GAAe,KAAKD,EAAL,GAAU,KAAKP,KAAL,CAAWS,CAA5C;AACA,WAAO,IAAIf,KAAJ,CAAU,CAAV,EAAac,CAAb,CAAP;AACH;AAED;;;;;;;;;;;AASAK,EAAAA,kBAAkB,CAACH,IAAD,EAClB,CAEC;;AAnFM;;AAsFX,eAAef,IAAf","sourcesContent":["/*\n * Module:      Line Segment\n *\n * Description: a line\n */\n\nimport React, { Component } from 'react';\nimport Point from './Point';\n\nclass Line {\n\n    constructor(pointStart, pointEnd)\n    {\n        this._pStart = pointStart;\n        this._pEnd = pointEnd;\n    }\n\n    get pointStart()\n    {\n        return this._pStart;\n    }\n\n    get pointEnd()\n    {\n        return this._pEnd;\n    }\n\n    /*\n     * find point between start -> end \n     * measure distance from start\n     */\n    findPointOnLineBetweenPoints(distance)\n    {\n    }\n\n    /*\n     * find point away from end point + distance.\n     * - not in between start -> end\n     */\n    findPointOnLineAwayEnd(distance)\n    {\n\n    }\n    \n    /*\n     * find tangent line from input point\n     *\n     * input:\n     * - point\n     * \n     * output:\n     * - tangent line object\n     */\n    findTangentThroughPoint(point,      // start point of line \n                            distance)   // find end point on tangent line\n    {\n        // tangent line's slope\n        var tm = 1 / this._m;\n\n        // find y intercept m = (y2 - y1) / (x2 - x1)\n        var y = point.y - tm * point.x;\n        var line = new Line(point, new Point(0, y));\n\n        var p = line.findPointOnLineAwayEnd(distance);\n\n        // consider about direction (between start + end point)\n        line = new Line(point, p);\n        return line;\n    }\n\n    /*\n     * find y-intercept point\n     */ \n    get Yintercept()\n    {\n        this._m = (this._pEnd.y - this._pStart.y)/(this._pEnd.x - this._pStart.x);\n        var y = this._pEnd.y - this._m * this._pEnd.x;\n        return new Point(0, y);\n    }\n    \n    /*\n     * find intersection with another line\n     *\n     * input:\n     * - line\n     *\n     * output:\n     * - point of intersection\n     */\n    pointIntersectLine(line)\n    {\n        \n    }\n}\n\nexport default Line;"]},"metadata":{},"sourceType":"module"}