{"ast":null,"code":"// See: <url:http://en.wikipedia.org/w/index.php?title=\n// Spline_interpolation&oldid=620360086>\n\n/*jslint node: true, maxerr: 50, maxlen: 80 */\n'use strict';\n\nvar square,\n    initAB,\n    createSa,\n    createSb,\n    createSc,\n    createSd,\n    createK,\n    initAB,\n    solve = require('tridiagonal-solve');\n\nsquare = function (x) {\n  return x * x;\n};\n\ncreateSa = function (px, n) {\n  var sa = [],\n      i;\n\n  for (i = 1; i <= n; i += 1) {\n    sa[i - 1] = 1 / (px[i] - px[i - 1]);\n  }\n\n  return sa;\n};\n\ncreateSb = function (px, n) {\n  var sb = [],\n      i;\n  sb[0] = 2 / (px[1] - px[0]);\n  sb[n] = 2 / (px[n] - px[n - 1]);\n\n  for (i = 1; i < n; i += 1) {\n    sb[i] = 2 * (1 / (px[i] - px[i - 1]) + 1 / (px[i + 1] - px[i]));\n  }\n\n  return sb;\n};\n\ncreateSc = function (px, n) {\n  var sc = [],\n      i;\n\n  for (i = 0; i < n; i += 1) {\n    sc[i] = 1 / (px[i + 1] - px[i]);\n  }\n\n  return sc;\n};\n\ncreateSd = function (px, py, n) {\n  var sd = [],\n      i;\n  sd[0] = 3 * (py[1] - py[0]) / square(px[1] - px[0]);\n  sd[n] = 3 * (py[n] - py[n - 1]) / square(px[n] - px[n - 1]);\n\n  for (i = 1; i < n; i += 1) {\n    sd[i] = 3 * ((py[i] - py[i - 1]) / square(px[i] - px[i - 1]) + (py[i + 1] - py[i]) / square(px[i + 1] - px[i]));\n  }\n\n  return sd;\n};\n\ncreateK = function (px, py, n) {\n  return solve(createSa(px, n), createSb(px, n), createSc(px, n), createSd(px, py, n));\n};\n\ninitAB = function (a, b, px, py, n) {\n  var i,\n      k = createK(px, py, n);\n\n  for (i = 1; i <= n; i += 1) {\n    a[i] = k[i - 1] * (px[i] - px[i - 1]) - (py[i] - py[i - 1]);\n    b[i] = -k[i] * (px[i] - px[i - 1]) + (py[i] - py[i - 1]);\n  }\n};\n\nmodule.exports = function (points) {\n  var n = points.length - 1,\n      px,\n      py,\n      q,\n      a = [],\n      b = [];\n\n  if (points.length === 0) {\n    return function () {\n      return 0;\n    };\n  }\n\n  if (points.length === 1) {\n    return function () {\n      return points[0][1];\n    };\n  }\n\n  points = points.sort(function (a, b) {\n    return a[0] - b[0];\n  }); // Interpolating polynomial for px[i-1] <= x <= px[i] where 1 <= i <= n.\n\n  q = function (i, x) {\n    var t = (x - px[i - 1]) / (px[i] - px[i - 1]);\n    return (1 - t) * py[i - 1] + t * py[i] + t * (1 - t) * (a[i] * (1 - t) + b[i] * t);\n  };\n\n  px = points.map(function (point) {\n    return point[0];\n  });\n  py = points.map(function (point) {\n    return point[1];\n  });\n  initAB(a, b, px, py, n);\n  return function (x) {\n    var i;\n\n    if (x < px[0]) {\n      return q(1, x); // extrapolates\n    }\n\n    for (i = 1; i <= n; i += 1) {\n      if (x < px[i]) {\n        return q(i, x);\n      }\n    }\n\n    return q(n, x); // extrapolates\n  };\n};","map":null,"metadata":{},"sourceType":"script"}