{"ast":null,"code":"var _jsxFileName = \"/home/parvin/Documents/my-app/src/SvgCubicSpline.js\";\nimport React, { Component } from 'react';\nimport Point from './Point';\nimport Line from './Line';\nimport COMB from './COMB';\nimport CubicSpline from './CubicSpline';\n\nclass SvgCubicSpline extends Component {\n  constructor(props) {\n    super();\n    this.state = null;\n    this.points = props.points;\n    this.spline = new CubicSpline();\n    this.spline.setKnotsFromPoints(this.points); //this.clickHandler = this.clickHandler.bind(this);\n  }\n\n  getSvgBound() {\n    this.svg = document.getElementById('idSvg');\n    if (null != this.svg) this.svgBound = this.svg.getBoundingClientRect();\n  }\n\n  clickHandler(e) {\n    if (typeof this.svg === \"undefined\") this.getSvgBound();\n    if (typeof this.svgBound === \"undefined\") return;\n    var pos = new Point(e.clientX - this.svgBound.left, e.clientY - this.svgBound.top);\n    this.spline.append(pos); // re-render\n\n    this.setState({\n      'nodes': 'add'\n    });\n  }\n  /*\n   * get SVG path elements that make up spline\n   */\n\n\n  createElements() {\n    /*\n     * consider these examples\n     * https://www.w3schools.com/graphics/svg_path.asp\n     */\n    if (!this.spline.hasKnots) return null;\n    var minX = this.spline.minX;\n    var maxX = this.spline.maxX;\n    this.spline.formulate();\n    this.interpolate(minX, maxX); // interpolate all points on curve\n\n    this.createKnots(minX, maxX); // create svg knots elements\n\n    this.createPieceswise(minX, maxX); // create piecewise segments\n    //this.createCOMB();\n  }\n  /*\n   * COMB\n   * http://www.aliasworkbench.com/theoryBuilders/TB5_evaluate1.htm\n   *\n   * 1. Curvature (height) = 1 / radius (a proportional value)\n   * 2. radius = intersection of 2 tangent lines\n   * 3. tangent line = tangent of a point on the spline curve.\n   * 4. point on spline curve = calculated or knot value.\n   */\n\n\n  createCMOB() {\n    var comb = new COMB(this.knot2Draw);\n    comb.calculateOrthogonals();\n    this.normals2Draw = [];\n    this.curve2Draw = [];\n    var last = null;\n\n    for (var i = 0; i < this.knots2Draw.length; i++) {\n      // create SVG normal lines\n      var line = comb.getNormalByIndex(i);\n      this.normals2Draw.push(this.createLine(line.pointStart.x, line.pointStart.y, line.pointEnd.x, line.pointEnd.y));\n      last = line; // draw COMB curve line\n\n      if (null != last) this.curve2Draw.push(this.createLine(last.pointEnd.x, last.pointEnd.y, line.pointEnd.x, line.pointEnd.y));\n    }\n  }\n\n  createKnots(minX, maxX) {\n    // create a dot for each knot \n    this.knots2Draw = [];\n\n    for (var i = 0; i < this.spline.arySrcX.length; i++) {\n      var x = this.spline.arySrcX[i];\n      var y = this.spline.arySrcY[i];\n      this.knots2Draw.push(this.createDot(x, y, 3));\n    }\n  }\n\n  interpolate(minX, maxX) {\n    // create a dot for every x position\n    this.dots2Draw = [];\n    this.curveY = [];\n\n    for (var x = minX; x < maxX; x++) {\n      var y = this.spline.interpolateY(x);\n      this.curveY.push(y);\n    }\n  }\n\n  createDot(x, y, radius) {\n    return React.createElement(\"circle\", {\n      className: \"point\",\n      cx: x,\n      cy: y,\n      r: radius,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    });\n  }\n\n  slopeRMS(slope0, slope1) {\n    var s = slope1 - slope0;\n    var rms = Math.sqrt(s * s);\n    return rms;\n  }\n\n  createPieceswise(minX, maxX) {\n    // draw lines - can be optimized \n    var slope0 = this.curveY[1] - this.curveY[0];\n    var p0 = new Point(minX, this.curveY[0]);\n    var p1 = null;\n    this.lines2Draw = [];\n    var len = this.curveY.length;\n\n    for (var i = 1; i < len; i++) {\n      // calculate slope\n      var slope1 = this.curveY[i + 1] - this.curveY[i]; // when slope changes\n\n      if (this.slopeRMS(slope0, slope1) > 0.1) {\n        p1 = new Point(i + minX, this.curveY[i]); // console.log(p1)\n\n        this.lines2Draw.push(this.createLine(p0, p1));\n        this.dots2Draw.push(this.createDot(p1.x, p1.y, 2));\n        console.log(p1.x, p1.y);\n        p0 = p1;\n        slope0 = slope1;\n      }\n    } // last line segment\n\n\n    this.lines2Draw.push(this.createLine(p0, new Point(maxX, this.curveY[len - 1])));\n  }\n\n  createLine(p0, p1) {\n    return React.createElement(\"line\", {\n      x1: p0.x,\n      y1: p0.y,\n      x2: p1.x,\n      y2: p1.y,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    });\n  }\n\n  getLines() {\n    return React.createElement(\"g\", {\n      stroke: \"green\",\n      strokeWidth: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, this.lines2Draw);\n  }\n\n  getLineDots() {\n    return React.createElement(\"g\", {\n      stroke: \"black\",\n      strokeWidth: \"0\",\n      fill: \"black\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, this.dots2Draw);\n  }\n\n  getCurveKnots() {\n    return React.createElement(\"g\", {\n      stroke: \"red\",\n      strokeWidth: \"1\",\n      fill: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, this.knots2Draw);\n  }\n  /*\n   * COMB function elements below\n   */\n\n\n  getCOMBNormals() {\n    return React.createElement(\"g\", {\n      stroke: \"blue\",\n      strokeWidth: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, this.normals2Draw);\n  }\n\n  getCOMBCurve() {\n    return React.createElement(\"g\", {\n      stroke: \"blue\",\n      strokeWidth: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, this.curve2Draw);\n  }\n\n  render() {\n    this.createElements();\n    return React.createElement(\"svg\", {\n      id: \"idSvg\",\n      width: \"20%\",\n      height: \"20%\",\n      viewBox: \" 0% 0% 100% 100%\",\n      onClick: this.clickHandler.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, this.getLines(), this.getLineDots(), this.getCurveKnots());\n  }\n\n}\n\nexport default SvgCubicSpline;","map":{"version":3,"sources":["/home/parvin/Documents/my-app/src/SvgCubicSpline.js"],"names":["React","Component","Point","Line","COMB","CubicSpline","SvgCubicSpline","constructor","props","state","points","spline","setKnotsFromPoints","getSvgBound","svg","document","getElementById","svgBound","getBoundingClientRect","clickHandler","e","pos","clientX","left","clientY","top","append","setState","createElements","hasKnots","minX","maxX","formulate","interpolate","createKnots","createPieceswise","createCMOB","comb","knot2Draw","calculateOrthogonals","normals2Draw","curve2Draw","last","i","knots2Draw","length","line","getNormalByIndex","push","createLine","pointStart","x","y","pointEnd","arySrcX","arySrcY","createDot","dots2Draw","curveY","interpolateY","radius","slopeRMS","slope0","slope1","s","rms","Math","sqrt","p0","p1","lines2Draw","len","console","log","getLines","getLineDots","getCurveKnots","getCOMBNormals","getCOMBCurve","render","bind"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,cAAN,SAA6BL,SAA7B,CAAuC;AACnCM,EAAAA,WAAW,CAACC,KAAD,EACX;AACI;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,MAAL,GAAcF,KAAK,CAACE,MAApB;AAEA,SAAKC,MAAL,GAAc,IAAIN,WAAJ,EAAd;AACA,SAAKM,MAAL,CAAYC,kBAAZ,CAA+B,KAAKF,MAApC,EANJ,CAQI;AACH;;AAEDG,EAAAA,WAAW,GACX;AACI,SAAKC,GAAL,GAAWC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAX;AACA,QAAG,QAAM,KAAKF,GAAd,EACI,KAAKG,QAAL,GAAgB,KAAKH,GAAL,CAASI,qBAAT,EAAhB;AACP;;AAEDC,EAAAA,YAAY,CAACC,CAAD,EACZ;AACI,QAAG,OAAO,KAAKN,GAAZ,KAAmB,WAAtB,EACI,KAAKD,WAAL;AAEJ,QAAG,OAAO,KAAKI,QAAZ,KAAwB,WAA3B,EACI;AAEJ,QAAII,GAAG,GAAG,IAAInB,KAAJ,CAAUkB,CAAC,CAACE,OAAF,GAAU,KAAKL,QAAL,CAAcM,IAAlC,EAAwCH,CAAC,CAACI,OAAF,GAAU,KAAKP,QAAL,CAAcQ,GAAhE,CAAV;AACA,SAAKd,MAAL,CAAYe,MAAZ,CAAmBL,GAAnB,EARJ,CAUI;;AACA,SAAKM,QAAL,CAAc;AAAC,eAAQ;AAAT,KAAd;AACD;AAEH;;;;;AAGAC,EAAAA,cAAc,GACd;AACI;;;;AAIA,QAAG,CAAC,KAAKjB,MAAL,CAAYkB,QAAhB,EACI,OAAO,IAAP;AAEJ,QAAIC,IAAI,GAAG,KAAKnB,MAAL,CAAYmB,IAAvB;AACA,QAAIC,IAAI,GAAG,KAAKpB,MAAL,CAAYoB,IAAvB;AACA,SAAKpB,MAAL,CAAYqB,SAAZ;AAEA,SAAKC,WAAL,CAAiBH,IAAjB,EAAuBC,IAAvB,EAZJ,CAYwC;;AACpC,SAAKG,WAAL,CAAiBJ,IAAjB,EAAuBC,IAAvB,EAbJ,CAawC;;AACpC,SAAKI,gBAAL,CAAsBL,IAAtB,EAA4BC,IAA5B,EAdJ,CAcwC;AACpC;AACH;AAEF;;;;;;;;;;;AASCK,EAAAA,UAAU,GACV;AACI,QAAIC,IAAI,GAAG,IAAIjC,IAAJ,CAAS,KAAKkC,SAAd,CAAX;AACAD,IAAAA,IAAI,CAACE,oBAAL;AAEA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,KAAKC,UAAL,CAAgBC,MAA/B,EAAuCF,CAAC,EAAxC,EACA;AACI;AACA,UAAIG,IAAI,GAAGT,IAAI,CAACU,gBAAL,CAAsBJ,CAAtB,CAAX;AACA,WAAKH,YAAL,CAAkBQ,IAAlB,CAAuB,KAAKC,UAAL,CAAiBH,IAAI,CAACI,UAAL,CAAgBC,CAAjC,EACiBL,IAAI,CAACI,UAAL,CAAgBE,CADjC,EAEiBN,IAAI,CAACO,QAAL,CAAcF,CAF/B,EAGiBL,IAAI,CAACO,QAAL,CAAcD,CAH/B,CAAvB;AAIAV,MAAAA,IAAI,GAAGI,IAAP,CAPJ,CASI;;AACA,UAAG,QAAMJ,IAAT,EACI,KAAKD,UAAL,CAAgBO,IAAhB,CAAqB,KAAKC,UAAL,CAAgBP,IAAI,CAACW,QAAL,CAAcF,CAA9B,EACeT,IAAI,CAACW,QAAL,CAAcD,CAD7B,EAEeN,IAAI,CAACO,QAAL,CAAcF,CAF7B,EAGeL,IAAI,CAACO,QAAL,CAAcD,CAH7B,CAArB;AAIP;AACJ;;AAEDlB,EAAAA,WAAW,CAACJ,IAAD,EAAOC,IAAP,EACX;AACI;AACA,SAAKa,UAAL,GAAkB,EAAlB;;AACA,SAAI,IAAID,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,KAAKhC,MAAL,CAAY2C,OAAZ,CAAoBT,MAAnC,EAA2CF,CAAC,EAA5C,EACA;AACI,UAAIQ,CAAC,GAAG,KAAKxC,MAAL,CAAY2C,OAAZ,CAAoBX,CAApB,CAAR;AACA,UAAIS,CAAC,GAAG,KAAKzC,MAAL,CAAY4C,OAAZ,CAAoBZ,CAApB,CAAR;AACA,WAAKC,UAAL,CAAgBI,IAAhB,CAAqB,KAAKQ,SAAL,CAAeL,CAAf,EAAkBC,CAAlB,EAAqB,CAArB,CAArB;AACH;AACJ;;AAEDnB,EAAAA,WAAW,CAACH,IAAD,EAAOC,IAAP,EACX;AACI;AACA,SAAK0B,SAAL,GAAiB,EAAjB;AACA,SAAKC,MAAL,GAAc,EAAd;;AACA,SAAI,IAAIP,CAAC,GAACrB,IAAV,EAAgBqB,CAAC,GAACpB,IAAlB,EAAwBoB,CAAC,EAAzB,EACA;AACI,UAAIC,CAAC,GAAG,KAAKzC,MAAL,CAAYgD,YAAZ,CAAyBR,CAAzB,CAAR;AACA,WAAKO,MAAL,CAAYV,IAAZ,CAAiBI,CAAjB;AACH;AACJ;;AAEDI,EAAAA,SAAS,CAACL,CAAD,EAAIC,CAAJ,EAAOQ,MAAP,EACT;AACI,WAAQ;AAAQ,MAAA,SAAS,EAAC,OAAlB;AAA0B,MAAA,EAAE,EAAET,CAA9B;AAAiC,MAAA,EAAE,EAAEC,CAArC;AAAwC,MAAA,CAAC,EAAEQ,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACH;;AAEDC,EAAAA,QAAQ,CAACC,MAAD,EAASC,MAAT,EACR;AACI,QAAIC,CAAC,GAAGD,MAAM,GAAGD,MAAjB;AACA,QAAIG,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUH,CAAC,GAACA,CAAZ,CAAV;AACA,WAAOC,GAAP;AACH;;AAED9B,EAAAA,gBAAgB,CAACL,IAAD,EAAOC,IAAP,EAChB;AACI;AACA,QAAI+B,MAAM,GAAI,KAAKJ,MAAL,CAAY,CAAZ,IAAe,KAAKA,MAAL,CAAY,CAAZ,CAA7B;AACA,QAAIU,EAAE,GAAG,IAAIlE,KAAJ,CAAU4B,IAAV,EAAgB,KAAK4B,MAAL,CAAY,CAAZ,CAAhB,CAAT;AAEA,QAAIW,EAAE,GAAG,IAAT;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,QAAIC,GAAG,GAAG,KAAKb,MAAL,CAAYb,MAAtB;;AACA,SAAI,IAAIF,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC4B,GAAf,EAAoB5B,CAAC,EAArB,EACA;AACI;AACA,UAAIoB,MAAM,GAAI,KAAKL,MAAL,CAAYf,CAAC,GAAC,CAAd,IAAiB,KAAKe,MAAL,CAAYf,CAAZ,CAA/B,CAFJ,CAII;;AACA,UAAG,KAAKkB,QAAL,CAAcC,MAAd,EAAsBC,MAAtB,IAA8B,GAAjC,EACA;AACIM,QAAAA,EAAE,GAAG,IAAInE,KAAJ,CAAUyC,CAAC,GAACb,IAAZ,EAAkB,KAAK4B,MAAL,CAAYf,CAAZ,CAAlB,CAAL,CADJ,CAEI;;AACA,aAAK2B,UAAL,CAAgBtB,IAAhB,CAAqB,KAAKC,UAAL,CAAgBmB,EAAhB,EAAoBC,EAApB,CAArB;AACA,aAAKZ,SAAL,CAAeT,IAAf,CAAoB,KAAKQ,SAAL,CAAea,EAAE,CAAClB,CAAlB,EAAqBkB,EAAE,CAACjB,CAAxB,EAA2B,CAA3B,CAApB;AACAoB,QAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAE,CAAClB,CAAf,EAAkBkB,EAAE,CAACjB,CAArB;AAEAgB,QAAAA,EAAE,GAAGC,EAAL;AACAP,QAAAA,MAAM,GAAGC,MAAT;AACH;AACJ,KAzBL,CA0BI;;;AACA,SAAKO,UAAL,CAAgBtB,IAAhB,CAAqB,KAAKC,UAAL,CAAgBmB,EAAhB,EAAoB,IAAIlE,KAAJ,CAAU6B,IAAV,EAAgB,KAAK2B,MAAL,CAAYa,GAAG,GAAC,CAAhB,CAAhB,CAApB,CAArB;AACH;;AAEDtB,EAAAA,UAAU,CAACmB,EAAD,EAAKC,EAAL,EACV;AACI,WAAQ;AAAM,MAAA,EAAE,EAAED,EAAE,CAACjB,CAAb;AAAgB,MAAA,EAAE,EAAEiB,EAAE,CAAChB,CAAvB;AAA0B,MAAA,EAAE,EAAEiB,EAAE,CAAClB,CAAjC;AAAoC,MAAA,EAAE,EAAEkB,EAAE,CAACjB,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACH;;AAEDsB,EAAAA,QAAQ,GACR;AACI,WAAQ;AAAG,MAAA,MAAM,EAAC,OAAV;AAAkB,MAAA,WAAW,EAAC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKJ,UADN,CAAR;AAGH;;AAEDK,EAAAA,WAAW,GACX;AAEI,WAAQ;AAAG,MAAA,MAAM,EAAC,OAAV;AAAkB,MAAA,WAAW,EAAC,GAA9B;AAAkC,MAAA,IAAI,EAAC,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKlB,SADN,CAAR;AAGH;;AAEDmB,EAAAA,aAAa,GACb;AACI,WAAQ;AAAG,MAAA,MAAM,EAAC,KAAV;AAAgB,MAAA,WAAW,EAAC,GAA5B;AAAgC,MAAA,IAAI,EAAC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACP,KAAKhC,UADE,CAAR;AAGH;AAED;;;;;AAGAiC,EAAAA,cAAc,GACd;AACI,WAAQ;AAAG,MAAA,MAAM,EAAC,MAAV;AAAiB,MAAA,WAAW,EAAC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACP,KAAKrC,YADE,CAAR;AAGH;;AAEDsC,EAAAA,YAAY,GACZ;AACI,WAAQ;AAAG,MAAA,MAAM,EAAC,MAAV;AAAiB,MAAA,WAAW,EAAC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACP,KAAKrC,UADE,CAAR;AAGH;;AAEDsC,EAAAA,MAAM,GAAG;AACL,SAAKnD,cAAL;AAEA,WACA;AAAK,MAAA,EAAE,EAAC,OAAR;AAAgB,MAAA,KAAK,EAAC,KAAtB;AAA4B,MAAA,MAAM,EAAC,KAAnC;AAAyC,MAAA,OAAO,EAAC,kBAAjD;AAAoE,MAAA,OAAO,EAAE,KAAKT,YAAL,CAAkB6D,IAAlB,CAAuB,IAAvB,CAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAKN,QAAL,EAFL,EAGK,KAAKC,WAAL,EAHL,EAIK,KAAKC,aAAL,EAJL,CADA;AASH;;AAxNkC;;AA2NvC,eAAetE,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport Point from './Point';\nimport Line from './Line';\nimport COMB from './COMB';\nimport CubicSpline from './CubicSpline';\n\nclass SvgCubicSpline extends Component {\n    constructor(props)\n    {\n        super();\n        this.state = null;\n        this.points = props.points;\n\n        this.spline = new CubicSpline();\n        this.spline.setKnotsFromPoints(this.points);\n\n        //this.clickHandler = this.clickHandler.bind(this);\n    }\n\n    getSvgBound()\n    {\n        this.svg = document.getElementById('idSvg');\n        if(null!=this.svg)\n            this.svgBound = this.svg.getBoundingClientRect();\n    }\n\n    clickHandler(e)\n    {\n        if(typeof(this.svg)===\"undefined\")\n            this.getSvgBound();\n\n        if(typeof(this.svgBound)===\"undefined\")\n            return;\n\n        var pos = new Point(e.clientX-this.svgBound.left, e.clientY-this.svgBound.top);\n        this.spline.append(pos);\n\n        // re-render\n        this.setState({'nodes':'add'})\n      }\n\n    /*\n     * get SVG path elements that make up spline\n     */\n    createElements()\n    {\n        /*\n         * consider these examples\n         * https://www.w3schools.com/graphics/svg_path.asp\n         */\n        if(!this.spline.hasKnots)\n            return null;\n\n        var minX = this.spline.minX;\n        var maxX = this.spline.maxX;\n        this.spline.formulate();\n\n        this.interpolate(minX, maxX);       // interpolate all points on curve\n        this.createKnots(minX, maxX);       // create svg knots elements\n        this.createPieceswise(minX, maxX);  // create piecewise segments\n        //this.createCOMB();\n    }\n\n   /*\n    * COMB\n    * http://www.aliasworkbench.com/theoryBuilders/TB5_evaluate1.htm\n    *\n    * 1. Curvature (height) = 1 / radius (a proportional value)\n    * 2. radius = intersection of 2 tangent lines\n    * 3. tangent line = tangent of a point on the spline curve.\n    * 4. point on spline curve = calculated or knot value.\n    */\n    createCMOB()\n    {\n        var comb = new COMB(this.knot2Draw);\n        comb.calculateOrthogonals();\n\n        this.normals2Draw = [];\n        this.curve2Draw = [];\n        var last = null;\n        for(var i=0; i<this.knots2Draw.length; i++)\n        {\n            // create SVG normal lines\n            var line = comb.getNormalByIndex(i);\n            this.normals2Draw.push(this.createLine( line.pointStart.x,\n                                                    line.pointStart.y,\n                                                    line.pointEnd.x,\n                                                    line.pointEnd.y));\n            last = line;\n\n            // draw COMB curve line\n            if(null!=last)\n                this.curve2Draw.push(this.createLine(last.pointEnd.x,\n                                                    last.pointEnd.y,\n                                                    line.pointEnd.x,\n                                                    line.pointEnd.y));\n        }\n    }\n\n    createKnots(minX, maxX)\n    {\n        // create a dot for each knot \n        this.knots2Draw = [];\n        for(var i=0; i<this.spline.arySrcX.length; i++)\n        {\n            var x = this.spline.arySrcX[i];\n            var y = this.spline.arySrcY[i];\n            this.knots2Draw.push(this.createDot(x, y, 3));\n        }\n    }\n\n    interpolate(minX, maxX)\n    {\n        // create a dot for every x position\n        this.dots2Draw = [];        \n        this.curveY = [];\n        for(var x=minX; x<maxX; x++)\n        {\n            var y = this.spline.interpolateY(x);\n            this.curveY.push(y);\n        }\n    }\n\n    createDot(x, y, radius)\n    {\n        return (<circle className=\"point\" cx={x} cy={y} r={radius} />);\n    }\n\n    slopeRMS(slope0, slope1)\n    {\n        var s = slope1 - slope0;\n        var rms = Math.sqrt(s*s);\n        return rms;\n    }\n\n    createPieceswise(minX, maxX)\n    {\n        // draw lines - can be optimized \n        var slope0 = (this.curveY[1]-this.curveY[0]);\n        var p0 = new Point(minX, this.curveY[0]);\n\n        var p1 = null;\n        this.lines2Draw = [];\n        var len = this.curveY.length;\n        for(var i=1; i<len; i++)\n        {\n            // calculate slope\n            var slope1 = (this.curveY[i+1]-this.curveY[i]);\n            \n            // when slope changes\n            if(this.slopeRMS(slope0, slope1)>0.1)\n            {\n                p1 = new Point(i+minX, this.curveY[i]);\n                // console.log(p1)\n                this.lines2Draw.push(this.createLine(p0, p1));\n                this.dots2Draw.push(this.createDot(p1.x, p1.y, 2));\n                console.log(p1.x, p1.y)\n\n                p0 = p1;\n                slope0 = slope1;\n            }\n        }\n        // last line segment\n        this.lines2Draw.push(this.createLine(p0, new Point(maxX, this.curveY[len-1])));\n    }\n\n    createLine(p0, p1)\n    {\n        return (<line x1={p0.x} y1={p0.y} x2={p1.x} y2={p1.y}/>);\n    }\n\n    getLines()\n    {\n        return (<g stroke=\"green\" strokeWidth=\"1\">\n                {this.lines2Draw}\n                </g>);\n    }\n\n    getLineDots()\n    {\n        \n        return (<g stroke=\"black\" strokeWidth=\"0\" fill=\"black\">\n                {this.dots2Draw}\n                </g>);\n    }\n\n    getCurveKnots()\n    {\n        return (<g stroke=\"red\" strokeWidth=\"1\" fill=\"red\">\n        {this.knots2Draw}\n        </g>);\n    }\n\n    /*\n     * COMB function elements below\n     */\n    getCOMBNormals()\n    {\n        return (<g stroke=\"blue\" strokeWidth=\"1\">\n        {this.normals2Draw}\n        </g>);\n    }\n\n    getCOMBCurve()\n    {\n        return (<g stroke=\"blue\" strokeWidth=\"1\">\n        {this.curve2Draw}\n        </g>);\n    }\n\n    render() {\n        this.createElements();\n        \n        return (\n        <svg id=\"idSvg\" width=\"20%\" height=\"20%\" viewBox=\" 0% 0% 100% 100%\" onClick={this.clickHandler.bind(this)}>\n            {/*<g transform=\"scale(2)\">*/}\n            {this.getLines()}        \n            {this.getLineDots()}\n            {this.getCurveKnots()}\n            {/*</g>*/}\n            \n        </svg>);\n    }\n}\n\nexport default SvgCubicSpline;"]},"metadata":{},"sourceType":"module"}