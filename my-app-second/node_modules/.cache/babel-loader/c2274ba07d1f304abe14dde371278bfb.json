{"ast":null,"code":"var _jsxFileName = \"/home/parvin/Documents/my-app/src/App.js\";\nimport React from 'react';\nimport logo from './logo.png'; // import logo-footer '.logoo.png';\n\nimport footerdcl from \"./footerdcl.svg\";\nimport kadomstev from './kadomstev.png';\nimport './App.css';\nimport Containers from './Containers'; ///extra line to use button \n\nimport ellipse from 'react-lines-ellipsis'; // import { Ellipse, Somet } from './frefe'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // These are our 3 Bézier points, stored in state.\n      startPoint: {\n        x: 10,\n        y: 10\n      },\n      controlPoint: {\n        x: 190,\n        y: 100\n      },\n      endPoint: {\n        x: 10,\n        y: 190\n      },\n      // We keep track of which point is currently being\n      // dragged. By default, no point is.\n      draggingPointId: null\n    };\n  }\n\n  handleMouseDown(pointId) {\n    this.setState({\n      draggingPointId: pointId\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      draggingPointId: null\n    });\n  }\n\n  handleMouseMove({\n    clientX,\n    clientY\n  }) {\n    const _this$props = this.props,\n          viewBoxWidth = _this$props.viewBoxWidth,\n          viewBoxHeight = _this$props.viewBoxHeight;\n    const draggingPointId = this.state.draggingPointId; // If we're not currently dragging a point, this is\n    // a no-op. Nothing needs to be done.\n\n    if (!draggingPointId) {\n      return;\n    } // During render, we capture a reference to the SVG\n    // we're drawing, and store it on the instance with\n    // `this.node`.\n    // If we were to `console.log(this.node)`, we'd see a\n    // reference to the underlying HTML element.\n    // eg. `<svg viewBox=\"0 0 250 250\"\n\n\n    const svgRect = this.node.getBoundingClientRect();\n    const svgX = clientX - svgRect.left;\n    const svgY = clientY - svgRect.top;\n    const viewBoxX = svgX * viewBoxWidth / svgRect.width;\n    const viewBoxY = svgY * viewBoxHeight / svgRect.height;\n    this.setState({\n      [draggingPointId]: {\n        x: viewBoxX,\n        y: viewBoxY\n      }\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          viewBoxWidth = _this$props2.viewBoxWidth,\n          viewBoxHeight = _this$props2.viewBoxHeight;\n    const _this$state = this.state,\n          startPoint = _this$state.startPoint,\n          controlPoint = _this$state.controlPoint,\n          endPoint = _this$state.endPoint; // As we've seen before, the quadratic Bézier curve\n    // involves moving to the starting point, and then\n    // specifying the control and end points with `Q`\n\n    const instructions = \"\\n      M \".concat(startPoint.x, \",\").concat(startPoint.y, \"\\n      Q \").concat(controlPoint.x, \",\").concat(controlPoint.y, \"\\n        \").concat(endPoint.x, \",\").concat(endPoint.y, \"\\n    \"); // console.log(instructions)\n\n    return React.createElement(\"svg\", {\n      ref: node => this.node = node,\n      viewBox: \" 0 0 250 250\",\n      onMouseMove: ev => this.handleMouseMove(ev),\n      onMouseUp: () => this.handleMouseUp(),\n      onMouseLeave: () => this.handleMouseUp(),\n      style: {\n        overflow: 'visible'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(ConnectingLine, {\n      from: startPoint,\n      to: controlPoint,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(ConnectingLine, {\n      from: controlPoint,\n      to: endPoint,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Curve, {\n      instructions: instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(LargeHandle, {\n      coordinates: startPoint,\n      onMouseDown: () => this.handleMouseDown('startPoint'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(LargeHandle, {\n      coordinates: endPoint,\n      onMouseDown: () => this.handleMouseDown('endPoint'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(SmallHandle, {\n      coordinates: controlPoint,\n      onMouseDown: () => this.handleMouseDown('controlPoint'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst ConnectingLine = ({\n  from,\n  to\n}) => React.createElement(\"line\", {\n  x1: from.x,\n  y1: from.y,\n  x2: to.x,\n  y2: to.y,\n  stroke: \"rgb(200, 200, 200)\",\n  strokeDasharray: \"5,5\",\n  strokeWidth: 2,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 132\n  },\n  __self: this\n});\n\nconsole.log(ConnectingLine);\n\nconst Curve = ({\n  instructions\n}) => React.createElement(\"path\", {\n  d: instructions,\n  fill: \"none\",\n  stroke: \"rgb(213, 0, 249)\",\n  strokeWidth: 5,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 146\n  },\n  __self: this\n});\n\nconst LargeHandle = ({\n  coordinates,\n  onMouseDown\n}) => React.createElement(\"ellipse\", {\n  cx: coordinates.x,\n  cy: coordinates.y,\n  rx: 15,\n  ry: 15,\n  fill: \"rgb(244, 0, 137)\",\n  onMouseDown: onMouseDown,\n  style: {\n    cursor: '-webkit-grab'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 156\n  },\n  __self: this\n});\n\nconst SmallHandle = ({\n  coordinates,\n  onMouseDown\n}) => React.createElement(\"ellipse\", {\n  cx: coordinates.x,\n  cy: coordinates.y,\n  rx: 8,\n  ry: 8,\n  fill: \"rgb(255, 255, 255)\",\n  stroke: \"rgb(244, 0, 137)\",\n  strokeWidth: 2,\n  onMouseDown: onMouseDown,\n  style: {\n    cursor: '-webkit-grab'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 169\n  },\n  __self: this\n}); // function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <a\n//         href=\"https://www.w3schools.com/w3css/4/w3.css\"\n//         rel=\"stylesheet\"\n//         ></a>\n//         <div class=\"w3-bar w3-border w3-light-grey\"></div>\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload. Hello world!\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n\nexport default App;","map":{"version":3,"sources":["/home/parvin/Documents/my-app/src/App.js"],"names":["React","logo","kadomstev","Containers","ellipse","App","Component","constructor","props","state","startPoint","x","y","controlPoint","endPoint","draggingPointId","handleMouseDown","pointId","setState","handleMouseUp","handleMouseMove","clientX","clientY","viewBoxWidth","viewBoxHeight","svgRect","node","getBoundingClientRect","svgX","left","svgY","top","viewBoxX","width","viewBoxY","height","render","instructions","ev","overflow","ConnectingLine","from","to","console","log","Curve","LargeHandle","coordinates","onMouseDown","cursor","SmallHandle"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.png';\n// import logo-footer '.logoo.png';\nimport footerdcl from './footerdcl.svg';\nimport kadomstev from './kadomstev.png';\nimport './App.css';\nimport Containers from './Containers';     ///extra line to use button \nimport ellipse from 'react-lines-ellipsis'  \n// import { Ellipse, Somet } from './frefe'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n    // These are our 3 Bézier points, stored in state.\n\n      startPoint: { x: 10, y: 10 },\n      controlPoint: { x: 190, y: 100 },\n      endPoint: { x: 10, y: 190 },\n\n      // We keep track of which point is currently being\n      // dragged. By default, no point is.\n\n      draggingPointId: null,\n  \n    };\n  }\n\n  handleMouseDown(pointId) {\n    this.setState({ draggingPointId: pointId });\n  }\n\n  handleMouseUp() {\n    this.setState({ draggingPointId: null });\n  }\n\n  handleMouseMove({ clientX, clientY }) {\n    const { viewBoxWidth, viewBoxHeight } = this.props;\n    const { draggingPointId } = this.state;\n\n    // If we're not currently dragging a point, this is\n    // a no-op. Nothing needs to be done.\n    if (!draggingPointId) {\n      return;\n    }\n    // During render, we capture a reference to the SVG\n    // we're drawing, and store it on the instance with\n    // `this.node`.\n    // If we were to `console.log(this.node)`, we'd see a\n    // reference to the underlying HTML element.\n    // eg. `<svg viewBox=\"0 0 250 250\"\n    const svgRect = this.node.getBoundingClientRect();\n    const svgX = clientX - svgRect.left;\n    const svgY = clientY - svgRect.top;\n    const viewBoxX = svgX * viewBoxWidth / svgRect.width;\n    const viewBoxY = svgY * viewBoxHeight / svgRect.height;\n    this.setState({\n      [draggingPointId]: { x: viewBoxX, y: viewBoxY },\n    });\n  }\n\n\n  render(){\n    const { viewBoxWidth, viewBoxHeight } = this.props;\n    const {\n    startPoint,\n    controlPoint,\n    endPoint,\n    } = this.state;\n\n    // As we've seen before, the quadratic Bézier curve\n    // involves moving to the starting point, and then\n    // specifying the control and end points with `Q`\n    const instructions = `\n      M ${startPoint.x},${startPoint.y}\n      Q ${controlPoint.x},${controlPoint.y}\n        ${endPoint.x},${endPoint.y}\n    `;\n\n    // console.log(instructions)\n\n    return (\n    \n        <svg\n          ref={node => (this.node = node)}\n          viewBox = \" 0 0 250 250\"   \n          onMouseMove={ev => this.handleMouseMove(ev)}\n          onMouseUp={() => this.handleMouseUp()}\n          onMouseLeave={() => this.handleMouseUp()}\n          style={{ overflow: 'visible' }}\n        >\n          <ConnectingLine\n            from={startPoint}\n            to={controlPoint}\n          />\n\n          <ConnectingLine from={controlPoint} to={endPoint} />\n\n          <Curve instructions={instructions} />\n\n            <LargeHandle\n              coordinates={startPoint}\n              onMouseDown={() =>\n                this.handleMouseDown('startPoint')\n              }\n            />\n\n            <LargeHandle\n              coordinates={endPoint}\n              onMouseDown={() =>\n                this.handleMouseDown('endPoint')\n            }\n            />\n\n            <SmallHandle\n              coordinates={controlPoint}\n              onMouseDown={() =>\n                this.handleMouseDown('controlPoint')\n              }\n            />\n        </svg>\n \n    );\n\n  }\n}\n\nconst ConnectingLine = ({ from, to }) => (\n  <line\n    \n    x1={from.x}\n    y1={from.y}\n    x2={to.x}\n    y2={to.y}\n    stroke=\"rgb(200, 200, 200)\"\n    strokeDasharray=\"5,5\"\n    strokeWidth={2}\n  />\n);\nconsole.log(ConnectingLine)\n\nconst Curve = ({ instructions }) => (\n  <path\n    \n    d={instructions}\n    fill=\"none\"\n    stroke=\"rgb(213, 0, 249)\"\n    strokeWidth={5}\n  />\n);\n\nconst LargeHandle = ({ coordinates, onMouseDown }) => (\n  <ellipse\n    \n    cx={coordinates.x}\n    cy={coordinates.y}\n    rx={15}\n    ry={15}\n    fill=\"rgb(244, 0, 137)\"\n    onMouseDown={onMouseDown}\n    style={{ cursor: '-webkit-grab' }}\n  />\n);\n\nconst SmallHandle = ({ coordinates, onMouseDown }) => (\n  <ellipse\n    \n    cx={coordinates.x}\n    cy={coordinates.y}\n    rx={8}\n    ry={8}\n    fill=\"rgb(255, 255, 255)\"\n    stroke=\"rgb(244, 0, 137)\"\n    strokeWidth={2}\n    onMouseDown={onMouseDown}\n    style={{ cursor: '-webkit-grab' }}\n  />\n);\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <a\n//         href=\"https://www.w3schools.com/w3css/4/w3.css\"\n//         rel=\"stylesheet\"\n//         ></a>\n//         <div class=\"w3-bar w3-border w3-light-grey\"></div>\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload. Hello world!\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}