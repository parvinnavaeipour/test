{"ast":null,"code":"// See: <url:http://en.wikipedia.org/w/index.php?title=\n// Tridiagonal_matrix_algorithm&oldid=634696642>\n//\n// In the code below, indexes start with zero. This means, replace in the\n// Wikipedia article's \"Method\" section:\n//\n//     a[j] → b[j-2]\n//     b[j] → b[j-1]\n//     c[j] → c[j-1]\n//     d[j] → d[j-1]\n//     x[j] → x[j-1]\n//     c'[j] → c'[j-1]\n//     d'[j] → d'[j-1]\n\n/*jslint node: true, maxerr: 50, maxlen: 80 */\n'use strict';\n\nvar createCp, createDp, solve, solve1; // cp: c'\n\ncreateCp = function (a, b, c, n) {\n  var i,\n      cp = [];\n  cp[0] = c[0] / b[0];\n\n  if (!isFinite(cp[0])) {\n    return null;\n  }\n\n  for (i = 1; i < n - 1; i += 1) {\n    cp[i] = c[i] / (b[i] - a[i - 1] * cp[i - 1]);\n\n    if (!isFinite(cp[i])) {\n      return null;\n    }\n  }\n\n  return cp;\n}; // dp: d'\n\n\ncreateDp = function (a, b, d, cp, n) {\n  var i,\n      dp = [];\n  dp[0] = d[0] / b[0];\n\n  if (!isFinite(dp[0])) {\n    return null;\n  }\n\n  for (i = 1; i < n; i += 1) {\n    dp[i] = (d[i] - a[i - 1] * dp[i - 1]) / (b[i] - a[i - 1] * cp[i - 1]);\n\n    if (!isFinite(dp[i])) {\n      return null;\n    }\n  }\n\n  return dp;\n};\n\nsolve = function (a, b, c, d, n) {\n  var i,\n      x = [],\n      cp,\n      dp;\n  cp = createCp(a, b, c, n);\n\n  if (cp === null) {\n    return null;\n  }\n\n  dp = createDp(a, b, d, cp, n);\n\n  if (dp === null) {\n    return null;\n  }\n\n  x[n - 1] = dp[n - 1];\n\n  for (i = n - 2; i >= 0; i -= 1) {\n    x[i] = dp[i] - cp[i] * x[i + 1];\n  }\n\n  return x;\n};\n\nsolve1 = function (b, d) {\n  var x = [d[0] / b[0]];\n  return isFinite(x[0]) ? x : null;\n}; // Returns null if there is no solution, an array of x-values otherwise.\n\n\nmodule.exports = function (a, b, c, d) {\n  var n = d.length;\n\n  if (n === 0) {\n    return [];\n  }\n\n  if (n === 1) {\n    return solve1(b, d);\n  }\n\n  return solve(a, b, c, d, n);\n};","map":null,"metadata":{},"sourceType":"script"}